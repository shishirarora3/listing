"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StyledButtonLink = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _js = require("@kiwicom/js");

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _consts = require("./consts");

var _consts2 = require("../Icon/consts");

var _Icon = require("../Icon");

var _rtl = require("../utils/rtl");

var _consts3 = require("../Button/consts");

var _getSpacingToken = _interopRequireDefault(require("../common/getSpacingToken"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getSizeToken = function getSizeToken(name) {
  return function (_ref) {
    var _TOKENS$heightButton, _TOKENS$fontSizeButto, _tokens;

    var theme = _ref.theme,
        size = _ref.size;
    var tokens = (_tokens = {}, _defineProperty(_tokens, _consts.TOKENS.heightButton, (_TOKENS$heightButton = {}, _defineProperty(_TOKENS$heightButton, _consts.SIZES.LARGE, theme.orbit.heightButtonLarge), _defineProperty(_TOKENS$heightButton, _consts.SIZES.NORMAL, theme.orbit.heightButtonNormal), _defineProperty(_TOKENS$heightButton, _consts.SIZES.SMALL, theme.orbit.heightButtonSmall), _TOKENS$heightButton)), _defineProperty(_tokens, _consts.TOKENS.fontSizeButton, (_TOKENS$fontSizeButto = {}, _defineProperty(_TOKENS$fontSizeButto, _consts.SIZES.LARGE, theme.orbit.fontSizeButtonLarge), _defineProperty(_TOKENS$fontSizeButto, _consts.SIZES.NORMAL, theme.orbit.fontSizeButtonNormal), _defineProperty(_TOKENS$fontSizeButto, _consts.SIZES.SMALL, theme.orbit.fontSizeButtonSmall), _TOKENS$fontSizeButto)), _tokens);
    return tokens[name][size];
  };
};

var getTypeToken = function getTypeToken(name) {
  return function (_ref2) {
    var _TOKENS$backgroundBut, _TOKENS$backgroundBut2, _TOKENS$backgroundBut3, _TOKENS$colorTextButt, _TOKENS$colorTextButt2, _TOKENS$colorTextButt3, _tokens2;

    var theme = _ref2.theme,
        type = _ref2.type;
    var tokens = (_tokens2 = {}, _defineProperty(_tokens2, _consts.TOKENS.backgroundButton, (_TOKENS$backgroundBut = {}, _defineProperty(_TOKENS$backgroundBut, _consts.TYPES.PRIMARY, theme.orbit.backgroundButtonLinkPrimary), _defineProperty(_TOKENS$backgroundBut, _consts.TYPES.SECONDARY, theme.orbit.backgroundButtonLinkSecondary), _TOKENS$backgroundBut)), _defineProperty(_tokens2, _consts.TOKENS.backgroundButtonHover, (_TOKENS$backgroundBut2 = {}, _defineProperty(_TOKENS$backgroundBut2, _consts.TYPES.PRIMARY, theme.orbit.backgroundButtonLinkPrimaryHover), _defineProperty(_TOKENS$backgroundBut2, _consts.TYPES.SECONDARY, theme.orbit.backgroundButtonLinkSecondaryHover), _TOKENS$backgroundBut2)), _defineProperty(_tokens2, _consts.TOKENS.backgroundButtonActive, (_TOKENS$backgroundBut3 = {}, _defineProperty(_TOKENS$backgroundBut3, _consts.TYPES.PRIMARY, theme.orbit.backgroundButtonLinkPrimaryHover), _defineProperty(_TOKENS$backgroundBut3, _consts.TYPES.SECONDARY, theme.orbit.backgroundButtonLinkSecondaryHover), _TOKENS$backgroundBut3)), _defineProperty(_tokens2, _consts.TOKENS.colorTextButton, (_TOKENS$colorTextButt = {}, _defineProperty(_TOKENS$colorTextButt, _consts.TYPES.PRIMARY, theme.orbit.colorTextButtonLinkPrimary), _defineProperty(_TOKENS$colorTextButt, _consts.TYPES.SECONDARY, theme.orbit.colorTextButtonLinkSecondary), _TOKENS$colorTextButt)), _defineProperty(_tokens2, _consts.TOKENS.colorTextButtonHover, (_TOKENS$colorTextButt2 = {}, _defineProperty(_TOKENS$colorTextButt2, _consts.TYPES.PRIMARY, theme.orbit.colorTextButtonLinkPrimaryHover), _defineProperty(_TOKENS$colorTextButt2, _consts.TYPES.SECONDARY, theme.orbit.colorTextButtonLinkSecondaryHover), _TOKENS$colorTextButt2)), _defineProperty(_tokens2, _consts.TOKENS.colorTextButtonActive, (_TOKENS$colorTextButt3 = {}, _defineProperty(_TOKENS$colorTextButt3, _consts.TYPES.PRIMARY, theme.orbit.colorTextButtonLinkPrimaryActive), _defineProperty(_TOKENS$colorTextButt3, _consts.TYPES.SECONDARY, theme.orbit.colorTextButtonLinkSecondaryActive), _TOKENS$colorTextButt3)), _tokens2);
    return tokens[name][type];
  };
};

var buttonSpacing = function buttonSpacing() {
  return function (_ref3) {
    var _TOKENS$paddingButton, _TOKENS$paddingButton2, _TOKENS$paddingButton3, _TOKENS$paddingButton4, _tokens3;

    var theme = _ref3.theme,
        onlyIcon = _ref3.onlyIcon,
        iconRight = _ref3.iconRight,
        iconLeft = _ref3.iconLeft,
        size = _ref3.size;
    if (onlyIcon) return (0, _rtl.rtlSpacing)(theme.orbit.paddingButtonWithoutText);
    var tokens = (_tokens3 = {}, _defineProperty(_tokens3, _consts.TOKENS.paddingButton, (_TOKENS$paddingButton = {}, _defineProperty(_TOKENS$paddingButton, _consts3.SIZE_OPTIONS.LARGE, theme.orbit.paddingButtonLarge), _defineProperty(_TOKENS$paddingButton, _consts3.SIZE_OPTIONS.NORMAL, theme.orbit.paddingButtonNormal), _defineProperty(_TOKENS$paddingButton, _consts3.SIZE_OPTIONS.SMALL, theme.orbit.paddingButtonSmall), _TOKENS$paddingButton)), _defineProperty(_tokens3, _consts.TOKENS.paddingButtonWithIcons, (_TOKENS$paddingButton2 = {}, _defineProperty(_TOKENS$paddingButton2, _consts3.SIZE_OPTIONS.LARGE, theme.orbit.paddingButtonLargeWithIcons), _defineProperty(_TOKENS$paddingButton2, _consts3.SIZE_OPTIONS.NORMAL, theme.orbit.paddingButtonNormalWithIcons), _defineProperty(_TOKENS$paddingButton2, _consts3.SIZE_OPTIONS.SMALL, theme.orbit.paddingButtonSmallWithIcons), _TOKENS$paddingButton2)), _defineProperty(_tokens3, _consts.TOKENS.paddingButtonWithLeftIcon, (_TOKENS$paddingButton3 = {}, _defineProperty(_TOKENS$paddingButton3, _consts3.SIZE_OPTIONS.LARGE, theme.orbit.paddingButtonLargeWithLeftIcon), _defineProperty(_TOKENS$paddingButton3, _consts3.SIZE_OPTIONS.NORMAL, theme.orbit.paddingButtonNormalWithLeftIcon), _defineProperty(_TOKENS$paddingButton3, _consts3.SIZE_OPTIONS.SMALL, theme.orbit.paddingButtonSmallWithLeftIcon), _TOKENS$paddingButton3)), _defineProperty(_tokens3, _consts.TOKENS.paddingButtonWithRightIcon, (_TOKENS$paddingButton4 = {}, _defineProperty(_TOKENS$paddingButton4, _consts3.SIZE_OPTIONS.LARGE, theme.orbit.paddingButtonLargeWithRightIcon), _defineProperty(_TOKENS$paddingButton4, _consts3.SIZE_OPTIONS.NORMAL, theme.orbit.paddingButtonNormalWithRightIcon), _defineProperty(_TOKENS$paddingButton4, _consts3.SIZE_OPTIONS.SMALL, theme.orbit.paddingButtonSmallWithRightIcon), _TOKENS$paddingButton4)), _tokens3);

    if (iconLeft && iconRight) {
      return (0, _rtl.rtlSpacing)(tokens[_consts.TOKENS.paddingButtonWithIcons][size]);
    }

    if (iconLeft && !iconRight) {
      return (0, _rtl.rtlSpacing)(tokens[_consts.TOKENS.paddingButtonWithLeftIcon][size]);
    }

    if (!iconLeft && iconRight) {
      return (0, _rtl.rtlSpacing)(tokens[_consts.TOKENS.paddingButtonWithRightIcon][size]);
    }

    return (0, _rtl.rtlSpacing)(tokens[_consts.TOKENS.paddingButton][size]);
  };
};

var iconSpacing = function iconSpacing() {
  return function (_ref4) {
    var _TOKENS$marginRightIc;

    var theme = _ref4.theme,
        right = _ref4.right,
        size = _ref4.size,
        onlyIcon = _ref4.onlyIcon;

    var tokens = _defineProperty({}, _consts.TOKENS.marginRightIcon, (_TOKENS$marginRightIc = {}, _defineProperty(_TOKENS$marginRightIc, _consts.SIZES.LARGE, theme.orbit.marginButtonIconLarge), _defineProperty(_TOKENS$marginRightIc, _consts.SIZES.NORMAL, theme.orbit.marginButtonIconNormal), _defineProperty(_TOKENS$marginRightIc, _consts.SIZES.SMALL, theme.orbit.marginButtonIconSmall), _TOKENS$marginRightIc));

    if (onlyIcon) {
      return null;
    }

    return (0, _rtl.rtlSpacing)(right ? "0 0 0 ".concat(tokens[_consts.TOKENS.marginRightIcon][size]) : "0 ".concat(tokens[_consts.TOKENS.marginRightIcon][size], " 0 0"));
  };
};

var IconContainer = (0, _styledComponents.default)(function (_ref5) {
  var className = _ref5.className,
      children = _ref5.children;
  return React.createElement("div", {
    className: className
  }, children);
}).withConfig({
  displayName: "ButtonLink__IconContainer",
  componentId: "sc-14jv5cl-0"
})(["display:flex;flex-direction:row;align-items:center;justify-content:center;margin:", ";> *{width:", ";height:", ";}"], iconSpacing(), function (_ref6) {
  var sizeIcon = _ref6.sizeIcon;
  return (0, _Icon.getSize)(sizeIcon);
}, function (_ref7) {
  var sizeIcon = _ref7.sizeIcon;
  return (0, _Icon.getSize)(sizeIcon);
});
IconContainer.defaultProps = {
  theme: _defaultTheme.default
};
var StyledButtonLink = (0, _styledComponents.default)(function (_ref8) {
  var onlyIcon = _ref8.onlyIcon,
      component = _ref8.component,
      circled = _ref8.circled,
      external = _ref8.external,
      block = _ref8.block,
      type = _ref8.type,
      icon = _ref8.icon,
      iconLeft = _ref8.iconLeft,
      iconRight = _ref8.iconRight,
      sizeIcon = _ref8.sizeIcon,
      width = _ref8.width,
      children = _ref8.children,
      transparent = _ref8.transparent,
      style = _ref8.style,
      theme = _ref8.theme,
      dataTest = _ref8.dataTest,
      submit = _ref8.submit,
      buttonRef = _ref8.buttonRef,
      ariaControls = _ref8.ariaControls,
      ariaExpanded = _ref8.ariaExpanded,
      spaceAfter = _ref8.spaceAfter,
      title = _ref8.title,
      props = _objectWithoutProperties(_ref8, ["onlyIcon", "component", "circled", "external", "block", "type", "icon", "iconLeft", "iconRight", "sizeIcon", "width", "children", "transparent", "style", "theme", "dataTest", "submit", "buttonRef", "ariaControls", "ariaExpanded", "spaceAfter", "title"]);

  var isButtonWithHref = component === "button" && props.href;
  var Component = isButtonWithHref ? "a" : component;
  var buttonType = submit ? "submit" : "button";
  return React.createElement(Component, _extends({
    "data-test": dataTest,
    type: !isButtonWithHref ? buttonType : undefined
  }, props, {
    ref: buttonRef,
    "aria-controls": ariaControls,
    "aria-expanded": ariaExpanded,
    "aria-label": title
  }), children);
}).withConfig({
  displayName: "ButtonLink__StyledButtonLink",
  componentId: "sc-14jv5cl-1"
})(["font-family:", ";box-sizing:border-box;appearance:none;display:inline-flex;justify-content:center;align-items:center;width:", ";height:", ";background:", ";color:", "!important;border:0;border-radius:", ";padding:", ";font-weight:", "!important;font-size:", ";cursor:", ";opacity:", ";transition:all 0.15s ease-in-out !important;outline:0;text-decoration:none;margin-bottom:", ";&:hover{", ";}&:active{", ";}&:focus{", ";}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.orbit.fontFamily;
}, function (_ref10) {
  var block = _ref10.block,
      width = _ref10.width,
      onlyIcon = _ref10.onlyIcon;
  return block ? "100%" : width && "".concat(width, "px") || onlyIcon && getSizeToken(_consts.TOKENS.heightButton) || "auto";
}, getSizeToken(_consts.TOKENS.heightButton), getTypeToken(_consts.TOKENS.backgroundButton), getTypeToken(_consts.TOKENS.colorTextButton), function (_ref11) {
  var theme = _ref11.theme,
      circled = _ref11.circled;
  return circled ? getSizeToken(_consts.TOKENS.heightButton) : theme.orbit.borderRadiusNormal;
}, buttonSpacing(), function (_ref12) {
  var theme = _ref12.theme;
  return theme.orbit.fontWeightBold;
}, getSizeToken(_consts.TOKENS.fontSizeButton), function (_ref13) {
  var disabled = _ref13.disabled;
  return disabled ? "not-allowed" : "pointer";
}, function (_ref14) {
  var disabled = _ref14.disabled,
      theme = _ref14.theme;
  return disabled ? theme.orbit.opacityButtonDisabled : "1";
}, _getSpacingToken.default, function (_ref15) {
  var transparent = _ref15.transparent,
      disabled = _ref15.disabled;
  return !disabled && (0, _styledComponents.css)(["background:", ";color:", "!important;"], !transparent && getTypeToken(_consts.TOKENS.backgroundButtonHover), getTypeToken(_consts.TOKENS.colorTextButtonHover));
}, function (_ref16) {
  var transparent = _ref16.transparent,
      disabled = _ref16.disabled,
      theme = _ref16.theme;
  return !disabled && (0, _styledComponents.css)(["transform:scale(", ");background:", ";color:", "!important;"], theme.orbit.modifierScaleButtonActive, !transparent && getTypeToken(_consts.TOKENS.backgroundButtonActive), getTypeToken(_consts.TOKENS.colorTextButtonActive));
}, function (_ref17) {
  var disabled = _ref17.disabled,
      theme = _ref17.theme;
  return !disabled && (0, _styledComponents.css)(["box-shadow:0 0 1px 1px ", ",0 0 1px 3px rgba(1,118,210,0.6);&:active{box-shadow:none;}"], theme.orbit.colorTextButtonWhiteBordered);
});
exports.StyledButtonLink = StyledButtonLink;
StyledButtonLink.defaultProps = {
  theme: _defaultTheme.default
}; // $FlowExpected

var ButtonLink = React.forwardRef(function (props, ref) {
  var external = props.external,
      children = props.children,
      _props$component = props.component,
      component = _props$component === void 0 ? "button" : _props$component,
      href = props.href,
      _props$size = props.size,
      size = _props$size === void 0 ? _consts.SIZES.NORMAL : _props$size,
      icon = props.icon,
      iconRight = props.iconRight,
      _props$type = props.type,
      type = _props$type === void 0 ? _consts.TYPES.PRIMARY : _props$type,
      onClick = props.onClick,
      _props$width = props.width,
      width = _props$width === void 0 ? 0 : _props$width,
      role = props.role,
      title = props.title;
  var iconLeft = props.iconLeft || icon;
  var sizeIcon = size === _consts2.ICON_SIZES.SMALL ? _consts2.ICON_SIZES.SMALL : _consts2.ICON_SIZES.MEDIUM;
  var onlyIcon = iconLeft && !children;
  (0, _js.warning)(!(!children && !title), "Warning: children or title property is missing on ButtonLink. Use title property to add aria-label to be accessible for screen readers. More information https://orbit.kiwi/components/buttonlink/#accessibility");
  return React.createElement(StyledButtonLink, _extends({}, props, {
    onClick: onClick,
    component: component,
    size: size,
    onlyIcon: onlyIcon,
    sizeIcon: sizeIcon,
    type: type,
    target: href && external ? "_blank" : undefined,
    rel: href && external ? "noopener noreferrer" : undefined,
    iconLeft: iconLeft,
    buttonRef: ref,
    width: width,
    role: role
  }), iconLeft && React.createElement(IconContainer, {
    size: size,
    type: type,
    onlyIcon: onlyIcon,
    sizeIcon: sizeIcon
  }, iconLeft), children, iconRight && React.createElement(IconContainer, {
    size: size,
    type: type,
    onlyIcon: onlyIcon,
    sizeIcon: sizeIcon,
    right: true
  }, iconRight));
});
ButtonLink.displayName = "ButtonLink";
var _default = ButtonLink;
exports.default = _default;