"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _ButtonLink = require("../ButtonLink");

var _Button = require("../Button");

var _rtl = require("../utils/rtl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var StyledButtonGroup = _styledComponents.default.div.withConfig({
  displayName: "ButtonGroup__StyledButtonGroup",
  componentId: "sc-82hrp5-0"
})(["display:flex;& ", ",& ", "{border-radius:", ";margin:", ";&:first-child{border-radius:", ";}&:last-child{border-radius:", ";margin:0;}}"], _ButtonLink.StyledButtonLink, _Button.StyledButton, function (_ref) {
  var connected = _ref.connected;
  return connected && "0";
}, function (_ref2) {
  var theme = _ref2.theme,
      connected = _ref2.connected;
  return (0, _rtl.rtlSpacing)(connected ? theme.orbit.marginButtonGroupConnected : theme.orbit.marginButtonGroup);
}, function (_ref3) {
  var connected = _ref3.connected,
      theme = _ref3.theme;
  return connected && (0, _rtl.borderRadius)("".concat(theme.orbit.borderRadiusNormal, " 0 0 ").concat(theme.orbit.borderRadiusNormal));
}, function (_ref4) {
  var connected = _ref4.connected,
      theme = _ref4.theme;
  return connected && (0, _rtl.borderRadius)("0 ".concat(theme.orbit.borderRadiusNormal, " ").concat(theme.orbit.borderRadiusNormal, " 0"));
});

StyledButtonGroup.defaultProps = {
  theme: _defaultTheme.default
};

var ButtonGroup = function ButtonGroup(_ref5) {
  var children = _ref5.children,
      connected = _ref5.connected,
      dataTest = _ref5.dataTest;
  return React.createElement(StyledButtonGroup, {
    connected: connected,
    "data-test": dataTest
  }, children);
};

var _default = ButtonGroup;
exports.default = _default;