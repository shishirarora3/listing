"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StyledText = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _consts = require("./consts");

var _getSpacingToken = _interopRequireDefault(require("../common/getSpacingToken"));

var _rtl = require("../utils/rtl");

var _TextLink = require("../TextLink");

var _consts2 = require("../TextLink/consts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getTypeToken = function getTypeToken() {
  return function (_ref) {
    var _typeTokens;

    var theme = _ref.theme,
        type = _ref.type;
    var typeTokens = (_typeTokens = {}, _defineProperty(_typeTokens, _consts.TYPE_OPTIONS.PRIMARY, theme.orbit.colorTextPrimary), _defineProperty(_typeTokens, _consts.TYPE_OPTIONS.SECONDARY, theme.orbit.colorTextSecondary), _defineProperty(_typeTokens, _consts.TYPE_OPTIONS.ATTENTION, theme.orbit.colorTextAttention), _defineProperty(_typeTokens, _consts.TYPE_OPTIONS.INFO, theme.orbit.colorTextInfo), _defineProperty(_typeTokens, _consts.TYPE_OPTIONS.SUCCESS, theme.orbit.colorTextSuccess), _defineProperty(_typeTokens, _consts.TYPE_OPTIONS.WARNING, theme.orbit.colorTextWarning), _defineProperty(_typeTokens, _consts.TYPE_OPTIONS.CRITICAL, theme.orbit.colorTextCritical), _defineProperty(_typeTokens, _consts.TYPE_OPTIONS.WHITE, theme.orbit.colorTextWhite), _typeTokens);
    return typeTokens[type];
  };
};

var getWeightToken = function getWeightToken() {
  return function (_ref2) {
    var _weightTokens;

    var theme = _ref2.theme,
        weight = _ref2.weight;
    var weightTokens = (_weightTokens = {}, _defineProperty(_weightTokens, _consts.WEIGHT_OPTIONS.NORMAL, theme.orbit.fontWeightNormal), _defineProperty(_weightTokens, _consts.WEIGHT_OPTIONS.BOLD, theme.orbit.fontWeightBold), _weightTokens);
    return weightTokens[weight];
  };
};

var getSizeToken = function getSizeToken() {
  return function (_ref3) {
    var _sizeTokens;

    var theme = _ref3.theme,
        size = _ref3.size;
    var sizeTokens = (_sizeTokens = {}, _defineProperty(_sizeTokens, _consts.SIZE_OPTIONS.LARGE, theme.orbit.fontSizeTextLarge), _defineProperty(_sizeTokens, _consts.SIZE_OPTIONS.NORMAL, theme.orbit.fontSizeTextNormal), _defineProperty(_sizeTokens, _consts.SIZE_OPTIONS.SMALL, theme.orbit.fontSizeTextSmall), _sizeTokens);
    return sizeTokens[size];
  };
};

var StyledText = (0, _styledComponents.default)(function (_ref4) {
  var TextElement = _ref4.element,
      children = _ref4.children,
      className = _ref4.className,
      dataTest = _ref4.dataTest;
  return React.createElement(TextElement, {
    className: className,
    "data-test": dataTest
  }, children);
}).withConfig({
  displayName: "Text__StyledText",
  componentId: "sc-19qtt4y-0"
})(["font-family:", ";font-size:", ";font-weight:", ";color:", ";line-height:", ";text-align:", ";text-transform:", ";font-style:", ";margin:0;margin-bottom:", ";a:not(", "){", "}"], function (_ref5) {
  var theme = _ref5.theme;
  return theme.orbit.fontFamily;
}, getSizeToken(), getWeightToken(), getTypeToken(), function (_ref6) {
  var theme = _ref6.theme;
  return theme.orbit.lineHeightText;
}, function (_ref7) {
  var align = _ref7.align;
  return (0, _rtl.textAlign)(align);
}, function (_ref8) {
  var uppercase = _ref8.uppercase;
  return uppercase && "uppercase";
}, function (_ref9) {
  var italic = _ref9.italic;
  return italic && "italic";
}, _getSpacingToken.default, _TextLink.StyledTextLink, function (_ref10) {
  var theme = _ref10.theme;
  return (0, _TextLink.getLinkStyle)({
    theme: theme,
    type: _consts2.TYPE_OPTIONS.PRIMARY
  });
});
exports.StyledText = StyledText;
StyledText.defaultProps = {
  theme: _defaultTheme.default
};

var Text = function Text(_ref11) {
  var _ref11$type = _ref11.type,
      type = _ref11$type === void 0 ? _consts.TYPE_OPTIONS.PRIMARY : _ref11$type,
      _ref11$size = _ref11.size,
      size = _ref11$size === void 0 ? _consts.SIZE_OPTIONS.NORMAL : _ref11$size,
      _ref11$weight = _ref11.weight,
      weight = _ref11$weight === void 0 ? _consts.WEIGHT_OPTIONS.NORMAL : _ref11$weight,
      _ref11$align = _ref11.align,
      align = _ref11$align === void 0 ? _consts.ALIGN_OPTIONS.LEFT : _ref11$align,
      _ref11$element = _ref11.element,
      element = _ref11$element === void 0 ? _consts.ELEMENT_OPTIONS.P : _ref11$element,
      _ref11$uppercase = _ref11.uppercase,
      uppercase = _ref11$uppercase === void 0 ? false : _ref11$uppercase,
      _ref11$italic = _ref11.italic,
      italic = _ref11$italic === void 0 ? false : _ref11$italic,
      dataTest = _ref11.dataTest,
      spaceAfter = _ref11.spaceAfter,
      children = _ref11.children;
  return React.createElement(StyledText, {
    type: type,
    size: size,
    weight: weight,
    align: align,
    element: element,
    uppercase: uppercase,
    italic: italic,
    dataTest: dataTest,
    spaceAfter: spaceAfter
  }, children);
};

var _default = Text;
exports.default = _default;