"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _scroll = require("../utils/scroll");

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var StyledSticky = _styledComponents.default.div.withConfig({
  displayName: "Sticky__StyledSticky",
  componentId: "sc-15w40gm-0"
})([""]);

var StyledStickyContent = _styledComponents.default.div.withConfig({
  displayName: "Sticky__StyledStickyContent",
  componentId: "sc-15w40gm-1"
})(["position:", ";", ";box-shadow:0 2px 20px 6px rgba(23,27,30,0.15);border-radius:", ";"], function (_ref) {
  var sticky = _ref.sticky;
  return sticky ? "fixed" : "relative";
}, function (_ref2) {
  var size = _ref2.size,
      initialWidth = _ref2.initialWidth;
  return (0, _styledComponents.css)(["top:", ";width:", ";"], size.height && "".concat(size.height, "px"), size.width && !initialWidth && "".concat(size.width, "px") || "100%");
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.orbit.borderRadiusNormal;
});

StyledStickyContent.defaultProps = {
  theme: _defaultTheme.default
};

var Sticky =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Sticky, _React$Component);

  function Sticky() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Sticky);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Sticky)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      sticky: false,
      height: 0,
      initialWidth: true,
      initialTop: 0,
      width: 0
    });

    _defineProperty(_assertThisInitialized(_this), "content", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "sticky", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleTop", function () {
      var _this$sticky;

      if ((_this$sticky = _this.sticky) === null || _this$sticky === void 0 ? void 0 : _this$sticky.current) {
        var values = _this.sticky.current.getBoundingClientRect();

        _this.setState({
          initialTop: values.top
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "stickyState", function (sticky, height, width) {
      _this.setState({
        sticky: sticky,
        height: height,
        width: width
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleScroll", function () {
      var _this$content, _this$sticky2;

      var element = (_this$content = _this.content) === null || _this$content === void 0 ? void 0 : _this$content.current;
      var sticky = (_this$sticky2 = _this.sticky) === null || _this$sticky2 === void 0 ? void 0 : _this$sticky2.current;
      var elementHeight = element.offsetHeight; // $FlowFixMe

      var parent = sticky.parentNode.getBoundingClientRect();
      var scrollingElement = (0, _scroll.getScrollingElement)().getBoundingClientRect();
      var _this$props$offset = _this.props.offset,
          offset = _this$props$offset === void 0 ? 0 : _this$props$offset;
      var initialTop = _this.state.initialTop;

      _this.setState({
        initialWidth: false
      }); // if (sets fixed position if window with offset reaches elements and current position is not on the bottom of parent element)


      if (Math.abs(scrollingElement.top) + offset >= initialTop && parent.bottom - elementHeight - offset >= 0) {
        _this.stickyState(true, offset, parent.width); // turns off fixed if it's on the bottom of parent's element

      } else if (parent.bottom - elementHeight - offset <= 0) {
        _this.stickyState(false, parent.height - elementHeight, parent.width);
      } else {
        // just off fixed
        _this.stickyState(false, 0, parent.width);
      }
    });

    return _this;
  }

  _createClass(Sticky, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.handleTop();
      (0, _scroll.addScrollHandler)(this.handleScroll);
      window.addEventListener("resize", this.handleTop);
      window.addEventListener("resize", this.handleScroll);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener("resize", this.handleTop);
      window.removeEventListener("resize", this.handleScroll);
      (0, _scroll.removeScrollHandler)(this.handleScroll);
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var _this$state = this.state,
          sticky = _this$state.sticky,
          height = _this$state.height,
          width = _this$state.width,
          initialWidth = _this$state.initialWidth;
      return React.createElement(StyledSticky, {
        ref: this.sticky
      }, React.createElement(StyledStickyContent, {
        sticky: sticky,
        size: {
          height: height,
          width: width
        },
        initialWidth: initialWidth,
        ref: this.content
      }, children));
    }
  }]);

  return Sticky;
}(React.Component);

var _default = Sticky;
exports.default = _default;