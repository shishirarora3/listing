"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _defaultTheme = _interopRequireDefault(require("../defaultTheme"));

var _mediaQuery = _interopRequireWildcard(require("../utils/mediaQuery"));

var _consts = require("./consts");

var _Text = require("../Text");

var _ListItem = require("../List/ListItem");

var _Portal = _interopRequireDefault(require("../Portal"));

var _resolveContainerPosition = _interopRequireDefault(require("./helpers/resolveContainerPosition"));

var _resolveContainerAlign = _interopRequireDefault(require("./helpers/resolveContainerAlign"));

var _resolveTooltipArrowAlign = _interopRequireDefault(require("./helpers/resolveTooltipArrowAlign"));

var _resolveTooltipArrowPosition = _interopRequireDefault(require("./helpers/resolveTooltipArrowPosition"));

var _tooltipArrowStyle = _interopRequireDefault(require("./helpers/tooltipArrowStyle"));

var _tooltipSize = _interopRequireDefault(require("./helpers/tooltipSize"));

var _Button = _interopRequireDefault(require("../Button"));

var _isPosition = require("./helpers/isPosition");

var _isAlign = require("./helpers/isAlign");

var _tooltipPadding = _interopRequireDefault(require("./helpers/tooltipPadding"));

var _randomID = _interopRequireDefault(require("../utils/randomID"));

var _consts2 = require("../utils/mediaQuery/consts");

var _Translate = _interopRequireDefault(require("../Translate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var StyledTooltipChildren = _styledComponents.default.span.withConfig({
  displayName: "Tooltip__StyledTooltipChildren",
  componentId: "sc-1l15bi-0"
})(["&:focus:active{outline:none;}", "{position:relative;display:inline-block;:after{display:block;border-bottom:1px dotted currentColor;position:relative;content:\" \";width:100%;height:0;top:-1px;}}"], _Text.StyledText);

var StyledTooltip = _styledComponents.default.div.withConfig({
  displayName: "Tooltip__StyledTooltip",
  componentId: "sc-1l15bi-1"
})(["width:100%;"]);

var StyledTooltipWrapper = _styledComponents.default.div.withConfig({
  displayName: "Tooltip__StyledTooltipWrapper",
  componentId: "sc-1l15bi-2"
})(["display:block;position:fixed;width:100%;box-sizing:border-box;border-top-left-radius:9px;border-top-right-radius:9px;background-color:", ";box-shadow:", ";padding:", ";visibility:", ";opacity:", ";transition:bottom ", " ease-in-out,visibility ", " linear ", ";z-index:10012;bottom:", ";left:0;right:0;img{max-width:100%;}", ";&::after{width:0;height:0;border-style:solid;content:\" \";display:none;position:absolute;", ";", ";", ";", ";"], function (_ref) {
  var theme = _ref.theme;
  return theme.orbit.paletteWhite;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.orbit.boxShadowElevatedLevel1;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.orbit.spaceMedium;
}, function (_ref4) {
  var shownMobile = _ref4.shownMobile;
  return shownMobile ? "visible" : "hidden";
}, function (_ref5) {
  var shownMobile = _ref5.shownMobile;
  return shownMobile ? "1" : "0";
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.orbit.durationNormal;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.orbit.durationFast;
}, function (_ref8) {
  var shownMobile = _ref8.shownMobile,
      theme = _ref8.theme;
  return !shownMobile && theme.orbit.durationNormal;
}, function (_ref9) {
  var shownMobile = _ref9.shownMobile,
      tooltipWidth = _ref9.tooltipWidth;
  return shownMobile ? "0" : "-".concat(tooltipWidth, "px");
}, _mediaQuery.default.largeMobile((0, _styledComponents.css)(["width:auto;max-width:", ";border-radius:", ";padding:", ";background-color:", ";visibility:", ";opacity:", ";transition:opacity ", " ease-in-out,visibility ", " ease-in-out;top:auto;right:auto;bottom:auto;left:auto;", ";", ";"], _tooltipSize.default, function (_ref10) {
  var theme = _ref10.theme;
  return theme.orbit.borderRadiusNormal;
}, _tooltipPadding.default, function (_ref11) {
  var theme = _ref11.theme;
  return theme.orbit.paletteBlueDark;
}, function (_ref12) {
  var shown = _ref12.shown;
  return shown ? "visible" : "hidden";
}, function (_ref13) {
  var shown = _ref13.shown;
  return shown ? "1" : "0";
}, function (_ref14) {
  var theme = _ref14.theme;
  return theme.orbit.durationFast;
}, function (_ref15) {
  var theme = _ref15.theme;
  return theme.orbit.durationFast;
}, _resolveContainerPosition.default, _resolveContainerAlign.default)), _tooltipArrowStyle.default, _resolveTooltipArrowPosition.default, _resolveTooltipArrowAlign.default, _mediaQuery.default.largeMobile((0, _styledComponents.css)(["display:block;"])));

StyledTooltipWrapper.defaultProps = {
  theme: _defaultTheme.default
};

var StyledTooltipContent = _styledComponents.default.div.withConfig({
  displayName: "Tooltip__StyledTooltipContent",
  componentId: "sc-1l15bi-3"
})(["font-family:", ";font-size:", ";font-weight:", ";line-height:", ";color:", ";margin-bottom:16px;& ", ",", "{font-size:", ";font-weight:", ";color:", ";}", ";"], function (_ref16) {
  var theme = _ref16.theme;
  return theme.orbit.fontFamily;
}, function (_ref17) {
  var theme = _ref17.theme;
  return theme.orbit.fontSizeTextNormal;
}, function (_ref18) {
  var theme = _ref18.theme;
  return theme.orbit.fontWeightNormal;
}, function (_ref19) {
  var theme = _ref19.theme;
  return theme.orbit.lineHeightText;
}, function (_ref20) {
  var theme = _ref20.theme;
  return theme.orbit.paletteInkNormal;
}, _Text.StyledText, _ListItem.Item, function (_ref21) {
  var theme = _ref21.theme;
  return theme.orbit.fontSizeTextNormal;
}, function (_ref22) {
  var theme = _ref22.theme;
  return theme.orbit.fontWeightNormal;
}, function (_ref23) {
  var theme = _ref23.theme;
  return theme.orbit.paletteInkNormal;
}, _mediaQuery.default.largeMobile((0, _styledComponents.css)(["color:", ";font-size:", ";font-weight:", ";margin-bottom:0;& ", ",", "{color:", ";font-weight:", ";font-size:", ";}"], function (_ref24) {
  var theme = _ref24.theme;
  return theme.orbit.paletteWhite;
}, function (_ref25) {
  var theme = _ref25.theme;
  return theme.orbit.fontSizeTextSmall;
}, function (_ref26) {
  var theme = _ref26.theme;
  return theme.orbit.fontWeightMedium;
}, _Text.StyledText, _ListItem.Item, function (_ref27) {
  var theme = _ref27.theme;
  return theme.orbit.paletteWhite;
}, function (_ref28) {
  var theme = _ref28.theme;
  return theme.orbit.fontWeightMedium;
}, function (_ref29) {
  var theme = _ref29.theme;
  return theme.orbit.fontSizeTextSmall;
})));

StyledTooltipContent.defaultProps = {
  theme: _defaultTheme.default
};

var StyledTooltipClose = _styledComponents.default.div.withConfig({
  displayName: "Tooltip__StyledTooltipClose",
  componentId: "sc-1l15bi-4"
})(["", ""], _mediaQuery.default.largeMobile((0, _styledComponents.css)(["display:none;visibility:hidden;"])));

StyledTooltipClose.defaultProps = {
  theme: _defaultTheme.default
};

var StyledTooltipOverlay = _styledComponents.default.div.withConfig({
  displayName: "Tooltip__StyledTooltipOverlay",
  componentId: "sc-1l15bi-5"
})(["position:fixed;display:block;visibility:", ";width:100%;height:100%;top:0;right:0;bottom:0;left:0;background-color:rgba(23,27,30,0.6);z-index:10011;opacity:", ";transition:opacity ", " ease-in-out,visibility ", " linear ", ";", ";"], function (_ref30) {
  var shownMobile = _ref30.shownMobile;
  return shownMobile ? "visible" : "hidden";
}, function (_ref31) {
  var shownMobile = _ref31.shownMobile;
  return shownMobile ? "1" : "0";
}, function (_ref32) {
  var theme = _ref32.theme;
  return theme.orbit.durationNormal;
}, function (_ref33) {
  var theme = _ref33.theme;
  return theme.orbit.durationFast;
}, function (_ref34) {
  var shownMobile = _ref34.shownMobile,
      theme = _ref34.theme;
  return !shownMobile && theme.orbit.durationNormal;
}, _mediaQuery.default.largeMobile((0, _styledComponents.css)(["display:none;visibility:hidden;"])));

StyledTooltipOverlay.defaultProps = {
  theme: _defaultTheme.default
};

var Tooltip =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(Tooltip, _React$PureComponent);

  function Tooltip() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tooltip)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      position: _consts.POSITIONS.RIGHT,
      align: _consts.ALIGNS.CENTER,
      shown: false,
      shownMobile: false
    });

    _defineProperty(_assertThisInitialized(_this), "container", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "tooltip", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "content", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "overlay", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "containerTop", 0);

    _defineProperty(_assertThisInitialized(_this), "containerLeft", 0);

    _defineProperty(_assertThisInitialized(_this), "containerHeight", 0);

    _defineProperty(_assertThisInitialized(_this), "containerWidth", 0);

    _defineProperty(_assertThisInitialized(_this), "tooltipWidth", 0);

    _defineProperty(_assertThisInitialized(_this), "tooltipHeight", 0);

    _defineProperty(_assertThisInitialized(_this), "windowWidth", 0);

    _defineProperty(_assertThisInitialized(_this), "windowHeight", 0);

    _defineProperty(_assertThisInitialized(_this), "contentHeight", 0);

    _defineProperty(_assertThisInitialized(_this), "closeButton", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "getDimensions", function () {
      if (_this.container && _this.tooltip && _this.content && typeof window !== "undefined") {
        var containerDimensions = _this.container.current.getBoundingClientRect();

        var tooltipDimensions = _this.tooltip.current.getBoundingClientRect(); // container positions and dimensions for calculation


        var containerTop = containerDimensions.top;
        var containerLeft = containerDimensions.left;
        var containerHeight = containerDimensions.height;
        var containerWidth = containerDimensions.width; // tooltip dimensions for calculation

        var tooltipHeight = tooltipDimensions.height;
        var tooltipWidth = tooltipDimensions.width; // window dimensions for calculation

        var windowWidth = window.innerWidth;
        var windowHeight = window.innerHeight;
        _this.containerTop = containerTop;
        _this.containerLeft = containerLeft;
        _this.containerHeight = containerHeight;
        _this.containerWidth = containerWidth;
        _this.tooltipHeight = tooltipHeight;
        _this.tooltipWidth = tooltipWidth;
        _this.windowWidth = windowWidth;
        _this.windowHeight = windowHeight;
        _this.contentHeight = _this.content.current && _this.content.current.getBoundingClientRect().height;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "setPosition", function (desiredPositions) {
      var _assertThisInitialize = _assertThisInitialized(_this),
          containerTop = _assertThisInitialize.containerTop,
          containerLeft = _assertThisInitialize.containerLeft,
          containerHeight = _assertThisInitialize.containerHeight,
          containerWidth = _assertThisInitialize.containerWidth,
          tooltipWidth = _assertThisInitialize.tooltipWidth,
          tooltipHeight = _assertThisInitialize.tooltipHeight,
          windowWidth = _assertThisInitialize.windowWidth,
          windowHeight = _assertThisInitialize.windowHeight;

      var canBePositionLeft = containerLeft - tooltipWidth - _consts.TOOLTIP_ARROW_SIZE > 0;
      var canBePositionRight = containerLeft + containerWidth + tooltipWidth + _consts.TOOLTIP_ARROW_SIZE < windowWidth;
      var canBePositionTop = containerTop - tooltipHeight > 0;
      var canBePositionBottom = containerTop + containerHeight + tooltipHeight < windowHeight; // returns the position name if the position can be set

      var isInside = function isInside(p) {
        if ((0, _isPosition.isPositionTop)(p) && canBePositionTop) {
          return _consts.POSITIONS.TOP;
        }

        if ((0, _isPosition.isPositionRight)(p) && canBePositionRight) {
          return _consts.POSITIONS.RIGHT;
        }

        if ((0, _isPosition.isPositionBottom)(p) && canBePositionBottom) {
          return _consts.POSITIONS.BOTTOM;
        }

        if ((0, _isPosition.isPositionLeft)(p) && canBePositionLeft) {
          return _consts.POSITIONS.LEFT;
        }

        return false;
      };

      var possiblePositions = desiredPositions.map(function (p) {
        return isInside(p);
      }) // filter all non string values
      .filter(function (p) {
        return typeof p === "string";
      }); // set the first valid position
      // ordering in POSITIONS const is important

      var position = possiblePositions[0];

      if (typeof position === "string" && _this.state.position !== position) {
        _this.setState({
          position: position
        });

        _this.setAlign(position);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "setAlign", function (position) {
      var _assertThisInitialize2 = _assertThisInitialized(_this),
          containerLeft = _assertThisInitialize2.containerLeft,
          containerTop = _assertThisInitialize2.containerTop,
          containerHeight = _assertThisInitialize2.containerHeight,
          containerWidth = _assertThisInitialize2.containerWidth,
          tooltipWidth = _assertThisInitialize2.tooltipWidth,
          tooltipHeight = _assertThisInitialize2.tooltipHeight,
          windowWidth = _assertThisInitialize2.windowWidth,
          windowHeight = _assertThisInitialize2.windowHeight;

      var canBeVerticalStart = containerLeft + containerWidth / 2 - _consts.TOOLTIP_TOTAL_PADDING > 0 && containerLeft + containerWidth / 2 - _consts.TOOLTIP_TOTAL_PADDING + tooltipWidth < windowWidth;
      var canBeVerticalCenter = containerLeft + containerWidth / 2 - tooltipWidth / 2 > 0 && containerLeft + containerWidth / 2 + tooltipWidth / 2 < windowWidth;
      var canBeVerticalEnd = containerLeft + containerWidth + _consts.TOOLTIP_TOTAL_PADDING < windowWidth && containerLeft + containerWidth / 2 + _consts.TOOLTIP_TOTAL_PADDING - tooltipWidth > 0;
      var canBeHorizontalStart = containerTop + containerHeight / 2 - _consts.TOOLTIP_TOTAL_PADDING > 0 && containerTop + containerHeight / 2 + (tooltipHeight - _consts.TOOLTIP_TOTAL_PADDING) < windowHeight;
      var canBeHorizontalCenter = containerTop + containerHeight / 2 - tooltipHeight / 2 > 0 && containerTop + containerHeight / 2 + tooltipHeight / 2 < windowHeight;
      var canBeHorizontalEnd = containerTop + containerHeight + _consts.TOOLTIP_TOTAL_PADDING - tooltipHeight > 0 && containerTop + containerHeight / 2 + _consts.TOOLTIP_TOTAL_PADDING < windowHeight;

      var isInside = function isInside(p, a) {
        if ((0, _isPosition.isVertical)(p)) {
          if ((0, _isAlign.isAlignStart)(a) && canBeVerticalStart) {
            return _consts.ALIGNS.START;
          }

          if ((0, _isAlign.isAlignCenter)(a) && canBeVerticalCenter) {
            return _consts.ALIGNS.CENTER;
          }

          if ((0, _isAlign.isAlignEnd)(a) && canBeVerticalEnd) {
            return _consts.ALIGNS.END;
          }
        } else if ((0, _isPosition.isHorizontal)(p)) {
          if ((0, _isAlign.isAlignStart)(a) && canBeHorizontalStart) {
            return _consts.ALIGNS.START;
          }

          if ((0, _isAlign.isAlignCenter)(a) && canBeHorizontalCenter) {
            return _consts.ALIGNS.CENTER;
          }

          if ((0, _isAlign.isAlignEnd)(a) && canBeHorizontalEnd) {
            return _consts.ALIGNS.END;
          }
        }

        return false;
      };

      var getAlign = function getAlign(p // https://github.com/facebook/flow/issues/2221
      ) {
        return Object.keys(_consts.ALIGNS).map(function (a) {
          return isInside(p, _consts.ALIGNS[a]);
        }) // filter all non string values
        .filter(function (a) {
          return typeof a === "string";
        });
      };

      var possibleAligns = getAlign(position);

      if (possibleAligns.length > 0 && typeof possibleAligns[0] === "string" && _this.state.align !== possibleAligns[0]) {
        _this.setState({
          align: possibleAligns[0]
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleIn", function () {
      var preferredPosition = _this.props.preferredPosition;
      var positions = Object.keys(_consts.POSITIONS).map(function (k) {
        return _consts.POSITIONS[k];
      });

      _this.getDimensions();

      if (preferredPosition) {
        _this.setPosition([preferredPosition].concat(_toConsumableArray(positions.filter(function (p) {
          return p !== preferredPosition;
        }))));
      } else {
        _this.setPosition(positions);
      } // https://github.com/facebook/flow/issues/2221


      _this.setState({
        shown: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleOut", function () {
      _this.setState({
        shown: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleOpen", function () {
      _this.getDimensions();

      if (_this.windowWidth <= +(0, _mediaQuery.getBreakpointWidth)(_consts2.QUERIES.LARGEMOBILE, _this.props.theme, true)) {
        _this.setState({
          shownMobile: true
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClose", function (ev) {
      var _this$overlay, _this$closeButton;

      ev.stopPropagation();

      if (ev.target === ((_this$overlay = _this.overlay) === null || _this$overlay === void 0 ? void 0 : _this$overlay.current) || ev.target === ((_this$closeButton = _this.closeButton) === null || _this$closeButton === void 0 ? void 0 : _this$closeButton.current)) {
        _this.setState({
          shownMobile: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "tooltipId", void 0);

    return _this;
  }

  _createClass(Tooltip, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.tooltipId = (0, _randomID.default)("tooltip");
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props !== prevProps) {
        this.getDimensions();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          content = _this$props.content,
          children = _this$props.children,
          _this$props$size = _this$props.size,
          size = _this$props$size === void 0 ? _consts.SIZE_OPTIONS.SMALL : _this$props$size,
          dataTest = _this$props.dataTest,
          _this$props$tabIndex = _this$props.tabIndex,
          tabIndex = _this$props$tabIndex === void 0 ? "0" : _this$props$tabIndex;
      var _this$state = this.state,
          shown = _this$state.shown,
          shownMobile = _this$state.shownMobile,
          position = _this$state.position,
          align = _this$state.align;
      var containerTop = this.containerTop,
          containerLeft = this.containerLeft,
          containerHeight = this.containerHeight,
          containerWidth = this.containerWidth,
          tooltipHeight = this.tooltipHeight,
          tooltipWidth = this.tooltipWidth,
          contentHeight = this.contentHeight;
      return React.createElement(React.Fragment, null, React.createElement(StyledTooltipChildren, {
        onClick: this.handleOpen,
        onMouseEnter: this.handleIn,
        onMouseLeave: this.handleOut,
        onFocus: this.handleIn,
        onBlur: this.handleOut,
        ref: this.container,
        "aria-describedby": this.tooltipId,
        tabIndex: tabIndex
      }, children), React.createElement(_Portal.default, {
        element: "tooltips"
      }, React.createElement(StyledTooltip, {
        "data-test": dataTest
      }, React.createElement(StyledTooltipOverlay, {
        onClick: this.handleClose,
        onFocus: this.handleOpen,
        shownMobile: shownMobile,
        ref: this.overlay
      }), React.createElement(StyledTooltipWrapper, {
        shown: shown,
        shownMobile: shownMobile,
        position: position,
        align: align,
        size: size,
        ref: this.tooltip,
        onMouseEnter: this.handleIn,
        onClick: this.handleClose,
        onMouseLeave: this.handleOut,
        containerTop: containerTop,
        containerLeft: containerLeft,
        containerHeight: containerHeight,
        containerWidth: containerWidth,
        tooltipHeight: tooltipHeight,
        tooltipWidth: tooltipWidth,
        contentHeight: contentHeight,
        role: "tooltip",
        "aria-hidden": !shown,
        id: this.tooltipId
      }, React.createElement(StyledTooltipContent, {
        ref: this.content
      }, content), React.createElement(StyledTooltipClose, null, React.createElement(_Button.default, {
        type: "secondary",
        block: true,
        onClick: this.handleClose,
        ref: this.closeButton
      }, React.createElement(_Translate.default, {
        tKey: "button_close"
      })))))));
    }
  }]);

  return Tooltip;
}(React.PureComponent);

_defineProperty(Tooltip, "defaultProps", {
  theme: _defaultTheme.default
});

var ThemedTooltip = (0, _styledComponents.withTheme)(Tooltip);
ThemedTooltip.displayName = "Tooltip";
var _default = ThemedTooltip;
exports.default = _default;