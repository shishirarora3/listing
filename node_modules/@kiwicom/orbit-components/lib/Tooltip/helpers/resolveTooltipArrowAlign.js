"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledComponents = require("styled-components");

var _isPosition = require("./isPosition");

var _isAlign = require("./isAlign");

var _consts = require("../consts");

// TODO: use tokens for 12px and 7px - paddings and sizeTooltipArrow
var resolveTooltipArrowAlign = function resolveTooltipArrowAlign(_ref) {
  var position = _ref.position,
      align = _ref.align,
      tooltipWidth = _ref.tooltipWidth,
      tooltipHeight = _ref.tooltipHeight;

  if ((0, _isPosition.isVertical)(position)) {
    if ((0, _isAlign.isAlignCenter)(align)) {
      return (0, _styledComponents.css)(["left:", "px;"], Math.floor(tooltipWidth / 2 - parseFloat(_consts.TOOLTIP_ARROW_SIZE)));
    }

    if ((0, _isAlign.isAlignStart)(align)) {
      return (0, _styledComponents.css)(["left:", ";"], parseFloat(_consts.TOOLTIP_PADDING));
    }

    if ((0, _isAlign.isAlignEnd)(align)) {
      return (0, _styledComponents.css)(["right:", "px;"], parseFloat(_consts.TOOLTIP_PADDING));
    }
  } else if ((0, _isPosition.isHorizontal)(position)) {
    if ((0, _isAlign.isAlignCenter)(align)) {
      return (0, _styledComponents.css)(["top:", "px;"], Math.floor(tooltipHeight / 2 - parseFloat(_consts.TOOLTIP_ARROW_SIZE)));
    }

    if ((0, _isAlign.isAlignStart)(align)) {
      return (0, _styledComponents.css)(["top:", "px;"], parseFloat(_consts.TOOLTIP_PADDING));
    }

    if ((0, _isAlign.isAlignEnd)(align)) {
      return (0, _styledComponents.css)(["bottom:", "px;"], parseFloat(_consts.TOOLTIP_PADDING));
    }
  }

  return null;
};

var _default = resolveTooltipArrowAlign;
exports.default = _default;