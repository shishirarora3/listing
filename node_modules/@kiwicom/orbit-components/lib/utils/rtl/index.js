"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.translate3d = exports.textAlign = exports.borderRadius = exports.right = exports.left = exports.rtlSpacing = void 0;

var leftToRight = function leftToRight(left, right) {
  return function (_ref) {
    var theme = _ref.theme;
    return theme.rtl ? right : left;
  };
};

var rtlSpacing = function rtlSpacing(value) {
  return function (_ref2) {
    var theme = _ref2.theme;

    if (!theme.rtl) {
      return value;
    }

    var parts = value.split(" ").filter(function (part) {
      return !Number.isNaN(parseFloat(part)) && part;
    });
    return parts.length === 4 ? [parts[0], parts[3], parts[2], parts[1]].join(" ") : value;
  };
};

exports.rtlSpacing = rtlSpacing;
var left = leftToRight("left", "right");
exports.left = left;
var right = leftToRight("right", "left");
exports.right = right;

var borderRadius = function borderRadius(value) {
  return function (_ref3) {
    var theme = _ref3.theme;

    if (!theme.rtl) {
      return value;
    }

    var parts = value.split(" ").filter(function (part) {
      return !Number.isNaN(parseFloat(part)) && part;
    });
    return parts.length === 4 ? [parts[1], parts[0], parts[3], parts[2]].join(" ") : value;
  };
};

exports.borderRadius = borderRadius;

var textAlign = function textAlign(value) {
  return function (_ref4) {
    var theme = _ref4.theme;

    if (theme.rtl) {
      if (value === "left") {
        return leftToRight("left", "right")({
          theme: theme
        });
      }

      if (value === "right") {
        return leftToRight("right", "left")({
          theme: theme
        });
      }
    }

    return value;
  };
};

exports.textAlign = textAlign;

var translate3d = function translate3d(value) {
  return function (_ref5) {
    var theme = _ref5.theme;

    if (!theme.rtl) {
      return "translate3d(".concat(value, ")");
    }

    var parts = value.split(",").filter(function (part) {
      return !Number.isNaN(parseFloat(part)) && part;
    });
    var x = parts[0];
    var newX = x[0] === "-" ? x.slice(1) : "-".concat(x);
    return "translate3d(".concat(newX, ",").concat(parts[1], ",").concat(parts[2], ")");
  };
};

exports.translate3d = translate3d;