"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _consts = require("../consts");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useVerticalPosition = function useVerticalPosition(desiredPositions, pos) {
  var _useState = (0, _react.useState)("bottom"),
      _useState2 = _slicedToArray(_useState, 2),
      positionDirection = _useState2[0],
      setPositionDirection = _useState2[1];

  (0, _react.useEffect)(function () {
    var canBePositionTop = pos.containerTop - pos.popoverHeight > 0;
    var canBePositionBottom = pos.containerTop + pos.containerHeight + pos.popoverHeight < pos.windowHeight; // returns the position name if the position can be set

    var isInside = function isInside(p) {
      if (p === _consts.POSITIONS.TOP && canBePositionTop) {
        return _consts.POSITIONS.TOP;
      }

      if (p === _consts.POSITIONS.BOTTOM && canBePositionBottom) {
        return _consts.POSITIONS.BOTTOM;
      }

      return false;
    };

    var possiblePositions = desiredPositions.map(function (p) {
      return isInside(p);
    }) // filter all non string values
    .filter(function (p) {
      return typeof p === "string";
    }); // set the first valid position
    // ordering in POSITIONS const is important

    var posPosition = possiblePositions[0];

    if (typeof posPosition === "string") {
      setPositionDirection(posPosition);
    }
  });
  return positionDirection;
};

var _default = useVerticalPosition;
exports.default = _default;