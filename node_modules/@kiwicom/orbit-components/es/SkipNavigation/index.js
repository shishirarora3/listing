import React, { useState } from "react";
import styled, { css } from "styled-components";
import Select from "../Select";
import Stack from "../Stack";
import ButtonLink from "../Button";
import defaultTheme from "../defaultTheme";
import Translate from "../Translate";
const StyledNavigation = styled.div.withConfig({
  displayName: "SkipNavigation__StyledNavigation",
  componentId: "sc-13g9jxq-0"
})(["background-color:", ";padding:", ";width:100%;box-sizing:border-box;&:focus{outline:none;}", ";"], ({
  theme
}) => theme.orbit.paletteCloudLight, ({
  theme
}) => theme.orbit.spaceMedium, ({
  show
}) => !show && css(["clip:rect(1px,1px,1px,1px);overflow:hidden;position:absolute;pointer-events:none;opacity:0;width:0;"]));
StyledNavigation.defaultProps = {
  theme: defaultTheme
};
const StyledSelectWrapper = styled.div.withConfig({
  displayName: "SkipNavigation__StyledSelectWrapper",
  componentId: "sc-13g9jxq-1"
})(["max-width:800px;"]);

const SkipNavigation = ({
  actions,
  feedbackUrl
}) => {
  const [links, setLinks] = useState([]);
  const [mappedLinks, setMappedLinks] = useState([]);
  const [innerPages, setPages] = useState([]);
  const [show, setShow] = useState(false);

  const handleLinksClick = ev => {
    const index = Number(ev.target.value);
    const selected = links[index - 1];

    if (selected) {
      selected.setAttribute("tabindex", "-1");
      selected.focus();
    }
  };

  const handlePageClick = ev => {
    if (actions) {
      const index = Number(ev.target.value);
      const selected = actions[index - 1];

      if (selected.onClick) {
        selected.onClick();
      } else if (selected.link) {
        window.location.href = selected.link;
      }
    }
  };

  const handleFocus = () => {
    if (links.length === 0) {
      const selectedLinks = document.querySelectorAll("[data-a11y-section]");
      const mappedSections = [{
        value: 0,
        label: "Jump to section" // TODO: Dictionary

      }, ...Object.keys(selectedLinks).map(key => ({
        value: Number(key) + 1,
        label: selectedLinks[Number(key)].innerText
      }))];

      if (selectedLinks) {
        setLinks(selectedLinks);
      }

      setMappedLinks(mappedSections);

      if (actions) {
        const mappedPages = [{
          value: 0,
          label: "Common actions" // TODO: Dictionary

        }, ...actions.map((el, i) => {
          return {
            value: i + 1,
            label: el.name
          };
        })];
        setPages(mappedPages);
      }
    }

    setShow(true);
  };

  return React.createElement(StyledNavigation, {
    tabIndex: "-1",
    onFocus: handleFocus,
    onBlur: () => {
      setShow(false);
    },
    show: show
  }, React.createElement(Stack, {
    justify: "between"
  }, React.createElement(StyledSelectWrapper, null, React.createElement(Stack, {
    align: "center"
  }, React.createElement(Select, {
    options: mappedLinks,
    onChange: handleLinksClick
  }), innerPages.length > 0 && React.createElement(Select, {
    options: innerPages,
    onChange: handlePageClick
  }))), feedbackUrl && React.createElement(ButtonLink, {
    href: feedbackUrl,
    type: "secondary",
    external: true
  }, React.createElement(Translate, {
    tKey: "a11ymenu_send_feedback"
  }))));
};

export default SkipNavigation;