function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from "react";
import styled from "styled-components";
import Button from "../Button";
import Minus from "../icons/Minus";
import Plus from "../icons/Plus";
import defaultTheme from "../defaultTheme";
const StyledStepper = styled.div.withConfig({
  displayName: "Stepper__StyledStepper",
  componentId: "sc-1rihspv-0"
})(["display:flex;width:100%;flex:1 1 100%;"]);
const StyledStepperInput = styled.input.withConfig({
  displayName: "Stepper__StyledStepperInput",
  componentId: "sc-1rihspv-1"
})(["width:100%;height:32px;padding:0;border:0;font-size:", ";font-weight:", ";color:", ";text-align:center;&::-webkit-inner-spin-button,&::-webkit-outer-spin-button{-webkit-appearance:none;margin:0;}&:focus{outline:none;}"], ({
  theme
}) => theme.orbit.fontSizeInputNormal, ({
  theme
}) => theme.orbit.fontWeightBold, ({
  theme
}) => theme.orbit.paletteInkNormal);
StyledStepperInput.defaultProps = {
  theme: defaultTheme
};

class Stepper extends React.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      value: this.props.defaultValue || 0
    });

    _defineProperty(this, "setValueAndInjectCallback", value => {
      const {
        onChange
      } = this.props;

      if (onChange) {
        onChange(value);
      }

      this.setState({
        value
      });
    });

    _defineProperty(this, "incrementCounter", () => {
      const {
        value
      } = this.state;
      const {
        maxValue = Number.POSITIVE_INFINITY,
        step = 1
      } = this.props;
      const newValue = value + step;
      const stateValue = newValue >= +maxValue ? maxValue : newValue;

      if (stateValue !== value) {
        this.setValueAndInjectCallback(stateValue);
      }
    });

    _defineProperty(this, "decrementCounter", () => {
      const {
        value
      } = this.state;
      const {
        minValue = Number.NEGATIVE_INFINITY,
        step = 1
      } = this.props;
      const newValue = value - step;
      const stateValue = newValue <= +minValue ? minValue : newValue;

      if (stateValue !== value) {
        this.setValueAndInjectCallback(stateValue);
      }
    });

    _defineProperty(this, "handleKeyDown", ev => {
      if (ev.keyCode === 40) {
        ev.preventDefault();
        this.decrementCounter();
      }

      if (ev.keyCode === 38) {
        ev.preventDefault();
        this.incrementCounter();
      }
    });
  }

  render() {
    const {
      onBlur,
      onFocus,
      disabled,
      name,
      dataTest,
      maxValue,
      minValue
    } = this.props;
    const {
      value
    } = this.state;
    return React.createElement(StyledStepper, {
      "data-test": dataTest
    }, React.createElement(Button, {
      disabled: disabled || disabled || value <= +minValue,
      iconLeft: React.createElement(Minus, null),
      type: "secondary",
      size: "small",
      onClick: this.decrementCounter
    }), React.createElement(StyledStepperInput, {
      name: name,
      disabled: disabled,
      type: "text",
      value: value || 0,
      min: minValue,
      max: maxValue,
      onKeyDown: this.handleKeyDown,
      onBlur: onBlur,
      onFocus: onFocus,
      readOnly: true
    }), React.createElement(Button, {
      disabled: disabled || disabled || value >= +maxValue,
      iconLeft: React.createElement(Plus, null),
      type: "secondary",
      size: "small",
      onClick: this.incrementCounter
    }));
  }

}

export default Stepper;