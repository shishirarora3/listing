import React, { useState, useRef } from "react";
import styled from "styled-components";
import Portal from "../Portal";
import PopoverContentWrapper from "./components/ContentWrapper";
const StyledPopoverChild = styled.div.withConfig({
  displayName: "Popover__StyledPopoverChild",
  componentId: "t88fx4-0"
})(["position:relative;"]);

const Popover = ({
  children,
  content,
  preferredPosition = "bottom",
  dataTest,
  opened,
  width,
  noPadding,
  onClose,
  onOpen
}) => {
  const [shown, setShown] = useState(false);
  const container = useRef(null);

  const resolveCallback = () => {
    if (onClose && shown) onClose();
    if (onOpen && !shown) onOpen();
  };

  const handleOut = () => {
    // If open prop is present ignore custom handler
    if (typeof opened === "undefined") {
      setShown(false);
      resolveCallback();
    }
  };

  const handleClick = () => {
    // If open prop is present ignore custom handler
    if (typeof opened === "undefined") {
      setShown(!shown);
      resolveCallback();
    }
  };

  return React.createElement(React.Fragment, null, React.createElement(StyledPopoverChild, {
    onClick: handleClick,
    ref: container
  }, children), (shown || opened) && React.createElement(Portal, {
    element: "popovers"
  }, React.createElement(PopoverContentWrapper, {
    width: width,
    containerRef: container.current,
    preferredPosition: preferredPosition,
    onClose: handleOut,
    dataTest: dataTest,
    noPadding: noPadding
  }, content)));
};

export default Popover;