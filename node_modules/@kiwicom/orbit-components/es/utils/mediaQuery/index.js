function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { css } from "styled-components";
import { QUERIES } from "./consts";
export const getBreakpointWidth = (name, theme, pure) => {
  const tokens = {
    [QUERIES.MEDIUMMOBILE]: theme.orbit.widthBreakpointMediumMobile,
    [QUERIES.LARGEMOBILE]: theme.orbit.widthBreakpointLargeMobile,
    [QUERIES.TABLET]: theme.orbit.widthBreakpointTablet,
    [QUERIES.DESKTOP]: theme.orbit.widthBreakpointDesktop,
    [QUERIES.LARGEDESKTOP]: theme.orbit.widthBreakpointLargeDesktop
  };

  if (pure) {
    return tokens[name];
  }

  return `(min-width: ${tokens[name]}px)`;
};
const mediaQueries = Object.keys(QUERIES).reduce((o, name) => _objectSpread({}, o, {
  [QUERIES[name]]: style => css(["@media ", "{", ";}"], ({
    theme
  }) => getBreakpointWidth(QUERIES[name], theme), style)
}), {});
export default mediaQueries;