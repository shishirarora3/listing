function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from "react";
import styled from "styled-components";
import { SIZE_OPTIONS } from "../InputField/consts";
import PlusCircle from "../icons/PlusCircle";
import MinusCircle from "../icons/MinusCircle";
import ButtonLink from "../ButtonLink";
import InputField, { Input, Prefix } from "../InputField";
import defaultTheme from "../defaultTheme";
import KEY_CODE_MAP from "../common/keyMaps";
import getSpacingToken from "../common/getSpacingToken";
const PrefixSuffix = styled((_ref) => {
  let {
    type
  } = _ref,
      props = _objectWithoutProperties(_ref, ["type"]);

  return React.createElement("div", props);
}).withConfig({
  displayName: "InputStepper__PrefixSuffix",
  componentId: "sc-1kqzp6i-0"
})(["flex-shrink:0;z-index:3;cursor:", ";"], ({
  disabled
}) => disabled && "not-allowed");
PrefixSuffix.defaultProps = {
  theme: defaultTheme
};
const StyledInputStepper = styled.div.withConfig({
  displayName: "InputStepper__StyledInputStepper",
  componentId: "sc-1kqzp6i-1"
})(["width:100%;margin-bottom:", ";", "{text-align:center;}", "{padding:0;pointer-events:auto;}"], getSpacingToken, Input, Prefix);
StyledInputStepper.defaultProps = {
  theme: defaultTheme
};
const StyledButtonWrapper = styled.div.withConfig({
  displayName: "InputStepper__StyledButtonWrapper",
  componentId: "sc-1kqzp6i-2"
})(["&:focus{outline:none;box-shadow:0 0 1px 1px ", ",0 0 1px 3px rgba(1,118,210,0.6);}&:focus:active{box-shadow:none;}"], ({
  theme
}) => theme.orbit.colorTextButtonWhiteBordered);
StyledButtonWrapper.defaultProps = {
  theme: defaultTheme
};

class InputStepper extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      value: this.props.defaultValue || 0
    });

    _defineProperty(this, "setValueAndInjectCallback", value => {
      const {
        onChange
      } = this.props;

      if (onChange) {
        onChange(value);
      }

      this.setState({
        value
      });
    });

    _defineProperty(this, "incrementCounter", () => {
      const {
        value
      } = this.state;
      const {
        maxValue = Number.POSITIVE_INFINITY,
        step = 1
      } = this.props;
      const newValue = value + step;
      const stateValue = newValue >= +maxValue ? maxValue : newValue;

      if (stateValue !== value) {
        this.setValueAndInjectCallback(stateValue);
      }
    });

    _defineProperty(this, "decrementCounter", () => {
      const {
        value
      } = this.state;
      const {
        minValue = Number.NEGATIVE_INFINITY,
        step = 1
      } = this.props;
      const newValue = value - step;
      const stateValue = newValue <= +minValue ? minValue : newValue;

      if (stateValue !== value) {
        this.setValueAndInjectCallback(stateValue);
      }
    });

    _defineProperty(this, "handleKeyDown", ev => {
      if (ev.keyCode === KEY_CODE_MAP.ARROW_DOWN) {
        ev.preventDefault();
        this.decrementCounter();
      }

      if (ev.keyCode === KEY_CODE_MAP.ARROW_UP) {
        ev.preventDefault();
        this.incrementCounter();
      }
    });

    _defineProperty(this, "handleChange", ev => {
      const {
        minValue = Number.NEGATIVE_INFINITY,
        maxValue = Number.POSITIVE_INFINITY
      } = this.props;
      const value = ev && parseInt(ev.target.value, 10);

      if (Number.isInteger(value) && value >= minValue && value <= maxValue) {
        this.setState({
          value
        });
      }
    });

    _defineProperty(this, "handleKeyDecrement", ev => {
      if (ev.keyCode === KEY_CODE_MAP.SPACE) {
        ev.preventDefault();
        this.decrementCounter();
      } else if (ev.keyCode === KEY_CODE_MAP.ENTER) {
        this.decrementCounter();
      }
    });

    _defineProperty(this, "handleKeyIncrement", ev => {
      if (ev.keyCode === KEY_CODE_MAP.SPACE) {
        ev.preventDefault();
        this.incrementCounter();
      } else if (ev.keyCode === KEY_CODE_MAP.ENTER) {
        this.incrementCounter();
      }
    });
  }

  render() {
    const {
      label,
      error,
      onBlur,
      onFocus,
      help,
      disabled,
      name,
      dataTest,
      size = SIZE_OPTIONS.NORMAL,
      maxValue,
      minValue,
      required,
      tabIndex,
      forwardedRef,
      spaceAfter
    } = this.props;
    const {
      value
    } = this.state;
    return React.createElement(StyledInputStepper, {
      spaceAfter: spaceAfter
    }, React.createElement(InputField, {
      dataTest: dataTest,
      size: size,
      label: label,
      disabled: disabled,
      required: required,
      name: name,
      error: error,
      help: help,
      type: "number",
      onChange: this.handleChange,
      onBlur: onBlur,
      onFocus: onFocus,
      onKeyDown: this.handleKeyDown,
      value: value || 0,
      minValue: minValue,
      maxValue: maxValue,
      tabIndex: tabIndex,
      ref: forwardedRef,
      prefix: React.createElement(StyledButtonWrapper, {
        role: "button",
        tabIndex: "0",
        onKeyDown: this.handleKeyDecrement
      }, React.createElement(ButtonLink, {
        disabled: disabled || value <= +minValue,
        iconLeft: React.createElement(MinusCircle, {
          color: "secondary"
        }),
        size: size,
        onClick: this.decrementCounter,
        transparent: true,
        component: PrefixSuffix
      })),
      suffix: React.createElement(StyledButtonWrapper, {
        role: "button",
        tabIndex: "0",
        onKeyDown: this.handleKeyIncrement
      }, React.createElement(ButtonLink, {
        disabled: disabled || value >= +maxValue,
        iconLeft: React.createElement(PlusCircle, {
          color: "secondary"
        }),
        size: size,
        onClick: this.incrementCounter,
        transparent: true,
        component: PrefixSuffix
      }))
    }));
  }

} // $FlowExpected


const ForwardedInputStepper = React.forwardRef((props, ref) => React.createElement(InputStepper, _extends({
  forwardedRef: ref
}, props)));
ForwardedInputStepper.displayName = "InputStepper";
export default ForwardedInputStepper;